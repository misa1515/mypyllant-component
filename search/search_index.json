{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>Home Assistant component that interfaces with the myVAILLANT API  (and branded versions of it, such as the MiGo Link app from Saunier Duval &amp; Bulex). Uses the myPyllant library.</p>"},{"location":"#installation","title":"Installation","text":"<p>Note</p> <ol> <li>The developers are not affiliated with Vaillant, we take no responsibility for anything that happens to your devices because of this library</li> <li>This integration is not compatible with systems that use sensoAPP and multiMATIC</li> </ol>"},{"location":"#hacs","title":"HACS","text":"<ol> <li>Install HACS</li> <li>Search for the myVAILLANT integration in HACS and install it</li> <li>Restart Home Assistant</li> <li>Add myVaillant integration</li> <li>Sign in with the email &amp; password you used in the myVAILLANT app (or MiGo app for Saunier Duval)</li> </ol>"},{"location":"#manual","title":"Manual","text":"<ol> <li>Download the latest release</li> <li>Extract the <code>custom_components</code> folder to your Home Assistant's config folder, the resulting folder structure should be <code>config/custom_components/mypyllant</code></li> <li>Restart Home Assistant</li> <li>Add myVaillant integration, or go to Settings &gt; Integrations and add myVAILLANT</li> <li>Sign in with the email &amp; password you used in the myVAILLANT app (or MiGo app for Saunier Duval)</li> </ol>"},{"location":"#tested-setups","title":"Tested Setups","text":"<ul> <li>Vaillant aroTHERM plus heatpump + sensoCOMFORT VRC 720 + sensoNET VR 921</li> <li>Vaillant ECOTEC PLUS boiler + VR940F + sensoCOMFORT</li> <li>Vaillant ECOTEC PLUS boiler + VRT380f + sensoNET</li> <li>Vaillant ECOTEC PLUS VCW20/1 boiler + sensoCOMFORT VRC 720 + sensoNET VR 921</li> <li>Vaillant ECOTEC PLUS 296/5-5 (R6) + sensoCOMFORT VRC 720/2 + VR 70 (2 circuits) + sensoNET VR 921</li> <li>Saunier Duval DUOMAX F30 90 + MISET Radio + MiLink V3</li> <li>Bulex Thema Condens F30/35 + Red 5 + MiPro Sense + MiLink v3</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Supports climate &amp; hot water controls, as well as sensor information</li> <li>Control operating modes, target temperature, and presets such as holiday more or quick veto</li> <li>Set the schedule for climate zones, water heaters, and circulation pumps with a custom service</li> <li>Track sensor information of devices, such as temperature, humidity, operating mode, energy usage, or energy efficiency</li> <li>See diagnostic information, such as the current heating curve, flow temperature, firmware versions, or water pressure</li> <li>Custom services to set holiday mode or quick veto temperature overrides, and their duration</li> </ul>"},{"location":"#options","title":"Options","text":""},{"location":"#seconds-between-scans","title":"Seconds between scans","text":"<p>Wait interval between updating (most) sensors. The energy data and efficiency sensors have a fixed hourly interval.</p>"},{"location":"#delay-before-refreshing-data-after-updates","title":"Delay before refreshing data after updates","text":"<p>How long to wait between making a request (i.e. setting target temperature) and refreshing data. The Vaillant takes some time to return the updated values.</p>"},{"location":"#default-duration-in-hours-for-quick-veto","title":"Default duration in hours for quick veto","text":"<p>When setting the temperature with the climate controls, the integration uses the \"quick veto\" feature of the myVAILLANT app.</p> <p>With this option you can set for how long the temperature should stay set, before returning to the default value.</p>"},{"location":"#temperature-controls-overwrite-time-program-instead-of-setting-quick-veto","title":"Temperature controls overwrite time program instead of setting quick veto","text":"<p>When raising or lowering the desired temperature in the myVAILLANT app, it sets a quick veto mode for a limited time with that new temperature, if the zone is in time controlled mode. If you want to permanently change the desired temperature, you need to update the time schedule.</p> <p>By default, this integration has the same behavior. But when enabling this option, the Home Assistant climate controls  instead overwrite the temperatures set in the time schedule with the new value (unless quick veto is already active).</p>"},{"location":"#country","title":"Country","text":"<p>The country you registered your myVAILLANT account in. The list of options is limited to known supported countries.</p>"},{"location":"#brand","title":"Brand","text":"<p>Brand of your HVAC equipment and app, pick Saunier Duval if you use the MiGo Link app.</p>"},{"location":"#supported-brands-countries","title":"Supported Brands &amp; Countries","text":"<p>Missing a Country?</p> <p>If a country is missing, please open an issue or contribute a new country to the myPyllant library.</p> <ul> <li>Vaillant<ul> <li>Albania</li> <li>Austria</li> <li>Belgium</li> <li>Bulgaria</li> <li>Croatia</li> <li>Czechia</li> <li>Denmark</li> <li>Estonia</li> <li>Finland</li> <li>France</li> <li>Georgia</li> <li>Germany</li> <li>Greece</li> <li>Hungary</li> <li>Italy</li> <li>Latvia</li> <li>Lithuania</li> <li>Luxembourg</li> <li>Netherlands</li> <li>Norway</li> <li>Poland</li> <li>Portugal</li> <li>Romania</li> <li>Serbia</li> <li>Slovakia</li> <li>Slovenia</li> <li>Spain</li> <li>Sweden</li> <li>Switzerland</li> <li>Ukraine</li> <li>United Kingdom</li> <li>Uzbekistan</li> </ul> </li> <li>Saunier Duval<ul> <li>Austria</li> <li>Czechia</li> <li>Finland</li> <li>France</li> <li>Greece</li> <li>Hungary</li> <li>Italy</li> <li>Lithuania</li> <li>Poland</li> <li>Portugal</li> <li>Romania</li> <li>Slovakia</li> <li>Spain</li> </ul> </li> <li>Bulex<ul> <li>Does not support country selection, just leave the option empty</li> </ul> </li> </ul>"},{"location":"#known-issues","title":"Known Issues","text":""},{"location":"#lack-of-test-data-for-different-systems","title":"Lack of Test Data for Different Systems","text":"<p>Your HVAC system might differ from the ones in Tested Setups above. If you don't see any entities, or get an error during setup, please check Debugging and create an issue. With debugging enabled, there's a chance to find the culprit in the data returned by the myVAILLANT API and fix it.</p>"},{"location":"1-automations/","title":"Automations","text":""},{"location":"1-automations/#legionella-protection1","title":"Legionella Protection<sup>1</sup>","text":"<p>With the Home Assistant component, more flexible legionella protection is possible. You can tweak the time condition or the target temperature(s).</p> <pre><code>alias: Legionella Protection\ndescription: \"\"\ntrigger:\n  - platform: time\n    at: \"10:00:00\"\ncondition:\n  - condition: time\n    weekday:\n      - sun  # (1)\naction:\n  - service: water_heater.set_temperature\n    data:\n      temperature: 75 # (2)\n    target:\n      entity_id: water_heater.domestic_hot_water_0\n  - delay:\n      hours: 8 # (3)\n      minutes: 0\n      seconds: 0\n      milliseconds: 0\n  - service: water_heater.set_temperature\n    data:\n      temperature: 50 # (4)\n    target:\n      entity_id: water_heater.domestic_hot_water_0\nmode: single\n</code></pre> <ol> <li>You can customize the frequency and weekday here, see Time condition documentation</li> <li>Here you can set the target temperature for legionella protection</li> <li>This is the duration. Make sure it covers the time period where your water heater is turned on</li> <li>This should be your regular water temperature</li> </ol> <ol> <li> <p>Contributed by CommanderROR in the Home Assistant Community \u21a9</p> </li> </ol>"},{"location":"2-entities/","title":"Entities","text":"<p>You can expect these entities, although names may vary based on your installed devices (in this example \"aroTHERM plus\"  and \"Hydraulic Station\") or the naming of your heating zones (in this case \"Zone 1\"):</p> Entity Unit Class Sample Outdoor Temperature \u00b0C temperature 16.7 System Water Pressure bar pressure 1.0 My Home VR 921 0357.40.30 Desired Temperature in Zone 1 \u00b0C temperature 5.0 Current Temperature in Zone 1 \u00b0C temperature 20.9 Humidity in Zone 1 % humidity 60.0 Heating Operating Mode in Zone 1 Off Heating State in Zone 1 Idle Current Special Function in Zone 1 None State in Circuit 0 STANDBY Current Flow Temperature in Circuit 0 \u00b0C temperature 35.5 Heating Curve in Circuit 0 0.68 Tank Temperature Domestic Hot Water 255 \u00b0C temperature 48.5 Setpoint Domestic Hot Water 255 \u00b0C temperature 50.0 Operation Mode Domestic Hot Water 255 Time Controlled Current Special Function Domestic Hot Water 255 Regular Heating Energy Efficiency 3.0 aroTHERM plus Consumed Electrical Energy Domestic Hot Water Wh energy 2000.0 aroTHERM plus Consumed Electrical Energy Heating Wh energy 1000.0 aroTHERM plus Earned Environment Energy Domestic Hot Water Wh energy 6000.0 aroTHERM plus Earned Environment Energy Heating Wh energy 0.0 aroTHERM plus Heat Generated Heating Wh energy 1000.0 aroTHERM plus Heat Generated Domestic Hot Water Wh energy 8000.0 hydraulic station Consumed Electrical Energy Domestic Hot Water Wh energy 0.0 hydraulic station Consumed Electrical Energy Heating Wh energy 0.0 Domestic Hot Water 0 Time Controlled Zone 1 off Trouble Codes on aroTHERM plus problem off Online Status aroTHERM plus connectivity on Firmware Update Required My Home VR 921 update off Firmware Update Enabled My Home VR 921 on Cooling Allowed in Circuit 0 off"},{"location":"2-library/","title":"CLI &amp; Python Library","text":"<p>The myPyllant library can interact with the API behind the myVAILLANT app  (and branded versions of it, such as the MiGo app from Saunier Duval). Needs at least Python 3.10.</p> <p>Not affiliated with Vaillant, the developers take no responsibility for anything that happens to your devices because of this library.</p>"},{"location":"2-library/#installation","title":"Installation","text":"<p>Warning</p> <p>You need at least Python 3.10</p> <pre><code>pip install myPyllant\npython3 -m myPyllant.export user password brand --country country\n# See python3 -m myPyllant.export -h for more options and a list of countries\n</code></pre> <p>..or use Docker:</p> <pre><code>docker run -ti ghcr.io/signalkraft/mypyllant:latest python3 -m myPyllant.export user password brand --country country\n</code></pre> <p>The <code>--data</code> argument exports historical data of the devices in your system. Without this keyword, information about your system will be exported as JSON.</p>"},{"location":"2-library/#usage","title":"Usage","text":"<pre><code>#!/usr/bin/env python3\n\nimport argparse\nimport asyncio\nimport logging\nfrom datetime import datetime, timedelta\n\nfrom myPyllant.api import MyPyllantAPI\nfrom myPyllant.const import ALL_COUNTRIES, BRANDS, DEFAULT_BRAND\n\nparser = argparse.ArgumentParser(description=\"Export data from myVaillant API   .\")\nparser.add_argument(\"user\", help=\"Username (email address) for the myVaillant app\")\nparser.add_argument(\"password\", help=\"Password for the myVaillant app\")\nparser.add_argument(\n    \"brand\",\n    help=\"Brand your account is registered in, i.e. 'vaillant'\",\n    default=DEFAULT_BRAND,\n    choices=BRANDS.keys(),\n)\nparser.add_argument(\n    \"--country\",\n    help=\"Country your account is registered in, i.e. 'germany'\",\n    choices=ALL_COUNTRIES.keys(),\n    required=False,\n)\nparser.add_argument(\n    \"-v\", \"--verbose\", help=\"increase output verbosity\", action=\"store_true\"\n)\n\n\nasync def main(user, password, brand, country):\n    async with MyPyllantAPI(user, password, brand, country) as api:\n        async for system in api.get_systems():\n            print(await api.get_time_zone(system))\n            print(\n                await api.set_holiday(\n                    system, datetime.now(), datetime.now() + timedelta(days=7)\n                )\n            )\n            print(await api.cancel_holiday(system))\n            print(await api.set_set_back_temperature(system.zones[0], 18))\n            print(await api.quick_veto_zone_temperature(system.zones[0], 21, 5))\n            print(await api.cancel_quick_veto_zone_temperature(system.zones[0]))\n            if system.domestic_hot_water:\n                print(await api.boost_domestic_hot_water(system.domestic_hot_water[0]))\n                print(await api.cancel_hot_water_boost(system.domestic_hot_water[0]))\n                print(\n                    await api.set_domestic_hot_water_temperature(\n                        system.domestic_hot_water[0], 46\n                    )\n                )\n\n\nif __name__ == \"__main__\":\n    args = parser.parse_args()\n    if args.verbose:\n        logging.basicConfig(level=logging.DEBUG)\n    asyncio.run(main(args.user, args.password, args.brand, args.country))\n</code></pre>"},{"location":"2-library/#contributing-tests","title":"Contributing &amp; Tests","text":"<p>Warning</p> <p>You need at least Python 3.10</p> <p>I'm happy to accept PRs, if you run the pre-commit checks and test your changes:</p> <pre><code>git clone https://github.com/signalkraft/myPyllant.git\ncd myPyllant\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -r dev-requirements.txt\npip install -e .\npre-commit install\npytest\n</code></pre>"},{"location":"2-services/","title":"Services","text":"<p>There are custom services to control holiday mode and quick veto temperatures for each climate zone. Search for \"myvaillant\" in Developer Tools &gt; Services in your Home Assistant instance to get the full list plus an interactive UI.</p> <p></p> <p></p>"},{"location":"2-services/#setting-a-time-program","title":"Setting a Time Program","text":"<p>The following services can be used to set time programs:</p> <ul> <li><code>mypyllant.set_zone_time_program</code> for climate zones (requires an additional <code>program_type</code>)</li> <li><code>mypyllant.set_zone_time_program</code> for climate zones</li> <li><code>mypyllant.set_dhw_circulation_time_program</code> for circulation pumps on water heaters</li> </ul> <p>You can look up your current time programs in the developer states view under attributes for your zones and water heater.</p> <p>Times in the time program are given in minutes since midnight in UTC.</p> <p>Disabling a time window</p> <p>You can delete all time windows on a day by sending an empty list, for example <code>monday: []</code>.</p> ClimateWater HeaterCirculation Pump <pre><code>service: mypyllant.set_zone_time_program\ndata:\n  program_type: heating\n  time_program:\n    monday:\n      - start_time: 420\n        end_time: 1290\n        setpoint: 20\n    tuesday:\n      - start_time: 420\n        end_time: 1290\n        setpoint: 20\n    wednesday:\n      - start_time: 420\n        end_time: 1290\n        setpoint: 20\n    thursday:\n      - start_time: 420\n        end_time: 1290\n        setpoint: 20\n    friday:\n      - start_time: 420\n        end_time: 1290\n        setpoint: 20\n    saturday:\n      - start_time: 420\n        end_time: 1290\n        setpoint: 20\n    sunday:\n      - start_time: 420\n        end_time: 1290\n        setpoint: 20\n    type: heating\ntarget:\n  entity_id: climate.zone_0\n</code></pre> <pre><code>service: mypyllant.set_dhw_time_program\ndata:\n  time_program:\n    monday:\n      - start_time: 420\n        end_time: 1290\n    tuesday:\n      - start_time: 420\n        end_time: 1290\n    wednesday:\n      - start_time: 420\n        end_time: 1290\n    thursday:\n      - start_time: 420\n        end_time: 1290\n    friday:\n      - start_time: 420\n        end_time: 1290\n    saturday:\n      - start_time: 420\n        end_time: 1290\n    sunday:\n      - start_time: 420\n        end_time: 1290\n    type: heating\ntarget:\n  entity_id: water_heater.domestic_hot_water_0\n</code></pre> <pre><code>service: mypyllant.set_dhw_circulation_time_program\ndata:\n  time_program:\n    monday:\n      - start_time: 420\n        end_time: 1290\n    tuesday:\n      - start_time: 420\n        end_time: 1290\n    wednesday:\n      - start_time: 420\n        end_time: 1290\n    thursday:\n      - start_time: 420\n        end_time: 1290\n    friday:\n      - start_time: 420\n        end_time: 1290\n    saturday:\n      - start_time: 420\n        end_time: 1290\n    sunday:\n      - start_time: 420\n        end_time: 1290\n    type: heating\ntarget:\n  entity_id: water_heater.domestic_hot_water_0\n</code></pre>"},{"location":"3-contributing/","title":"Contributing","text":""},{"location":"3-contributing/#contributing-to-the-home-assistant-component","title":"Contributing to the Home Assistant Component","text":"<p>Warning</p> <p>You need at least Python 3.10.</p> <p>Fork and clone this repo, then from the root directory run:</p> <pre><code>python3 -m venv .venv\nsource .venv/bin/activate\npip install -r dev-requirements.txt\npre-commit install\n# Make your changes\npytest\ngit commit ...\n</code></pre> <p>If you also need to modify the underlying myPyllant library, clone &amp; install it in editable mode in <code>mypyllant-component</code>:</p> <pre><code># From the root of this repository\ngit clone https://github.com/signalkraft/myPyllant.git ../myPyllant\npip install -e ../myPyllant\n</code></pre> <p>Now you can modify <code>myPyllant/src</code> and directly develop against these changes in <code>mypyllant-component</code>.</p>"},{"location":"3-contributing/#debugging","title":"Debugging","text":"<p>When debugging or reporting issues, turn on debug logging by adding this to your <code>configuration.yaml</code>  and restarting Home Assistant:</p> <pre><code>logger:\n  default: warning\n  logs:\n    custom_components.mypyllant: debug\n    myPyllant: debug\n</code></pre>"},{"location":"3-contributing/#testing-in-docker","title":"Testing in Docker","text":"<p>To get a quick test environment in Docker, copy <code>.env.sample</code> to <code>.env</code>,  add your credentials in the new file, and run <code>docker compose up</code>.</p> <p>After HA started, open http://localhost:8123 in your browser and sign in with user <code>test</code> and password <code>test</code>.</p> <p>The integration should be configured and show entities on the default dashboard.</p>"},{"location":"3-contributing/#contributing-to-the-underlying-mypyllant-library","title":"Contributing to the underlying myPyllant library","text":"<p>Warning</p> <p>You need at least Python 3.10</p> <p>I'm happy to accept PRs, if you run the pre-commit checks and test your changes:</p> <pre><code>git clone https://github.com/signalkraft/myPyllant.git\ncd myPyllant\npython3 -m venv .venv\nsource .venv/bin/activate\npip install -r dev-requirements.txt\npip install -e .\npre-commit install\npytest\n</code></pre>"},{"location":"3-contributing/#supporting-new-countries","title":"Supporting new Countries","text":"<p>The myVAILLANT app uses Keycloak and OIDC for authentication, with a realm for each country and brand. There is a script to check which countries are supported:</p> <pre><code>python3 -m myPyllant.tests.find_countries\n</code></pre> <p>Copy the resulting dictionary into https://github.com/signalkraft/myPyllant/blob/main/src/myPyllant/const.py</p>"},{"location":"3-contributing/#contributing-test-data","title":"Contributing Test Data","text":"<p>Because the myVAILLANT API isn't documented, you can help the development of this library by contributing test data:</p> <pre><code>python3 -m myPyllant.tests.generate_test_data -h\npython3 -m myPyllant.tests.generate_test_data username password brand --country country\n</code></pre> <p>..or use Docker:</p> <pre><code>docker run -v $(pwd)/test_data:/build/src/myPyllant/tests/json -ti ghcr.io/signalkraft/mypyllant:latest python3 -m myPyllant.tests.generate_test_data username password brand --country country\n</code></pre> <p>With docker, the results will be put into <code>test_data/</code>.</p> <p>You can then either create a PR with the created folder, or zip it and attach it to an issue.</p>"},{"location":"3-contributing/#adding-new-api-endpoints","title":"Adding new API endpoints","text":"<p>If your myVAILLANT app has more features than this integration, chances are you have a more complex system then me. You can reverse engineer the API endpoints and open an issue with the requests + responses. See Reverse Engineering for a tutorial.</p>"},{"location":"3-contributing/#running-commands-on-your-home-assistant-installation-in-docker","title":"Running commands on your Home Assistant installation in Docker","text":"<p>If you're using this component in a Home Assistant installation that uses docker compose, you can run these commands directly (from the folder that contains your <code>docker-compose.yml</code>):</p> <pre><code>docker compose exec homeassistant python3 -m myPyllant.tests.generate_test_data username password brand --country country\n# Note the output folder\ndocker compose cp homeassistant:&lt;testdata folder&gt; .\n# Test data will be copied to your current directory\n</code></pre>"},{"location":"3-reverse-engineering/","title":"Reverse Engineering Android Apps","text":"<p>Any Android app that makes HTTPS API requests (in this case to the myVAILLANT API), can be reverse engineered with an Android device and a laptop / PC that runs ADB. Both need to be on the same network. Creating a hotspot from the Android device also works.</p> <ol> <li>Run mitmproxy on your laptop, for example in Docker:     <pre><code>docker run --rm -it -v ~/.mitmproxy:/home/mitmproxy/.mitmproxy -p 0.0.0.0:8080:8080 -p 127.0.0.1:8081:8081 mitmproxy/mitmproxy mitmweb --web-host 0.0.0.0\n</code></pre></li> <li>In your Android WI-FI settings (see screenshot below) set a manual proxy to the IP of the device running mitmproxy on port 8080.    Add a bypass for <code>identity.vaillant-group.com</code><sup>1</sup></li> <li>Visit mitm.it on your Android device, download the CA cert &amp; install it through the settings app</li> <li>Install ADB on your laptop and connect your Android device to USB in debug mode</li> <li>Look for the myVAILLANT APK online and download it</li> <li>Run android-unpinner on the APK and wait for it to launch the modified app on your Android device with ADB</li> <li>You should see all API calls in mitmproxy's web interface on http://127.0.0.1:8081 now.     If you can't log in with SSO because of a certificate error, make sure you added the exception to the proxy settings.    If you can log in, but the app reports an error, the unpinning didn't work.    You can try MagiskTrustUserCertson if you have a rooted Android device.</li> </ol> <p> </p> Source: digitalcitizen.life <ol> <li> <p>The single-sign on gets handled in your browser, which uses certificate pinning as an added security measure\u00a0\u21a9</p> </li> </ol>"}]}